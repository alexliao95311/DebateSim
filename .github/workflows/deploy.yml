name: Deploy to Azure VM

on:
  push:
    branches:
      - main 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 30s
          command_timeout: 1m
          script: |
            echo "üîç Testing SSH connection..."
            echo "Hostname: $(hostname)"
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "‚úÖ SSH connection successful"

      - name: Update Code
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 60s
          command_timeout: 3m
          script: |
            set -e
            echo "üöÄ Updating code..."
            cd /home/${{ secrets.VM_USER }}/DebateSim
            git pull origin main
            echo "‚úÖ Code updated successfully"

      - name: Restart Backend
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 60s
          command_timeout: 2m
          script: |
            set -e
            echo "üîÑ Restarting Backend..."
            cd /home/${{ secrets.VM_USER }}/DebateSim
            
            # Kill existing backend process using PID file
            echo "Stopping existing backend..."
            if [ -f "backend.pid" ]; then
              if kill $(cat backend.pid) 2>/dev/null; then
                echo "Backend process stopped"
              else
                echo "Backend PID file exists but process not running"
              fi
              rm -f backend.pid
            else
              echo "No backend PID file found"
            fi
            
            # Check if venv exists and activate
            if [ ! -f "venv/bin/activate" ]; then
              echo "‚ùå Virtual environment not found"
              exit 1
            fi
            
            echo "Activating virtual environment..."
            source venv/bin/activate
            
            echo "Starting backend server..."
            # Start backend server in background and save PID
            nohup uvicorn main:app --host 0.0.0.0 --port 5000 --reload > backend.log 2>&1 &
            echo $! > backend.pid
            
            # Wait and check if process started
            sleep 5
            
            if pgrep -f "uvicorn main:app" > /dev/null; then
              echo "‚úÖ Backend started successfully"
              # Test backend is responding
              if curl -f -s http://localhost:5000/docs > /dev/null; then
                echo "‚úÖ Backend is responding to requests"
              else
                echo "‚ö†Ô∏è  Backend process running but not responding"
              fi
            else
              echo "‚ùå Backend failed to start"
              echo "Backend logs:"
              cat backend.log || echo "No backend logs available"
              exit 1
            fi

      - name: Build Frontend
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 60s
          command_timeout: 8m
          script: |
            set -e
            echo "üõ† Building Frontend..."
            cd /home/${{ secrets.VM_USER }}/DebateSim/frontend
            
            # Kill existing frontend process using PID file
            echo "Stopping existing frontend..."
            if [ -f "frontend.pid" ]; then
              if kill $(cat frontend.pid) 2>/dev/null; then
                echo "Frontend process stopped"
              else
                echo "Frontend PID file exists but process not running"
              fi
              rm -f frontend.pid
            else
              echo "No frontend PID file found"
            fi
            
            echo "üì¶ Installing dependencies..."
            npm install
            
            echo "üî® Building frontend..."
            npm run build
            echo "‚úÖ Frontend built successfully"

      - name: Deploy Frontend with Nginx
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 60s
          command_timeout: 3m
          script: |
            set -e
            echo "üåê Deploying frontend with nginx..."
            cd /home/${{ secrets.VM_USER }}/DebateSim/frontend
            
            # Stop any running frontend development server
            if [ -f "frontend.pid" ]; then
              if kill $(cat frontend.pid) 2>/dev/null; then
                echo "Frontend development server stopped"
              fi
              rm -f frontend.pid
            fi
            
            # Ensure frontend build exists
            if [ ! -d "dist" ]; then
              echo "‚ùå Frontend dist directory not found. Build may have failed."
              exit 1
            fi
            
            # Set correct permissions for nginx to read files
            echo "Setting permissions for nginx..."
            sudo chmod 755 /home/${{ secrets.VM_USER }} /home/${{ secrets.VM_USER }}/DebateSim /home/${{ secrets.VM_USER }}/DebateSim/frontend
            sudo chmod -R 755 /home/${{ secrets.VM_USER }}/DebateSim/frontend/dist
            
            # Test and reload nginx
            echo "Testing nginx configuration..."
            sudo nginx -t
            
            echo "Reloading nginx..."
            sudo systemctl reload nginx
            
            # Verify nginx is running
            if sudo systemctl is-active --quiet nginx; then
              echo "‚úÖ Nginx is running and serving frontend on port 80"
            else
              echo "‚ùå Nginx is not running"
              sudo systemctl status nginx
              exit 1
            fi
            
            echo "üéâ Deployment completed successfully!"
            echo "Backend: http://${{ secrets.VM_HOST }}:5000"
            echo "Frontend: http://${{ secrets.VM_HOST }} (port 80)"