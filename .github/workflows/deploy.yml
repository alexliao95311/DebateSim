name: Deploy to Azure VM

on:
  push:
    branches:
      - main 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 30s
          command_timeout: 1m
          script: |
            echo "üîç Testing SSH connection..."
            echo "Hostname: $(hostname)"
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "‚úÖ SSH connection successful"

      - name: Update Code
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 60s
          command_timeout: 3m
          script: |
            set -e
            echo "üöÄ Updating code..."
            cd /home/${{ secrets.VM_USER }}/DebateSim
            git pull origin main
            echo "‚úÖ Code updated successfully"

      - name: Restart Backend
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 60s
          command_timeout: 2m
          script: |
            set -e
            echo "üîÑ Restarting Backend..."
            cd /home/${{ secrets.VM_USER }}/DebateSim
            
            # Kill existing process with timeout
            echo "Stopping existing backend..."
            timeout 10s pkill -f "uvicorn main:app" || echo "No existing backend process"
            sleep 2
            
            # Check if venv exists and activate
            if [ ! -f "venv/bin/activate" ]; then
              echo "‚ùå Virtual environment not found"
              exit 1
            fi
            
            echo "Activating virtual environment..."
            source venv/bin/activate
            
            echo "Starting backend server..."
            # Start backend server in background
            nohup uvicorn main:app --host 0.0.0.0 --port 5000 --reload > backend.log 2>&1 & disown
            
            # Wait and check if process started
            sleep 3
            
            if pgrep -f "uvicorn main:app" > /dev/null; then
              echo "‚úÖ Backend started successfully"
            else
              echo "‚ùå Backend failed to start"
              echo "Backend logs:"
              cat backend.log || echo "No backend logs available"
              exit 1
            fi

      - name: Build Frontend
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 60s
          command_timeout: 8m
          script: |
            set -e
            echo "üõ† Building Frontend..."
            cd /home/${{ secrets.VM_USER }}/DebateSim/frontend
            
            # Kill existing frontend process
            timeout 10s pkill -f "npx serve" || echo "No existing frontend process"
            sleep 2
            
            echo "üì¶ Installing dependencies..."
            npm install
            
            echo "üî® Building frontend..."
            npm run build
            echo "‚úÖ Frontend built successfully"

      - name: Start Frontend
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          timeout: 60s
          command_timeout: 3m
          script: |
            set -e
            echo "üåê Starting frontend server..."
            cd /home/${{ secrets.VM_USER }}/DebateSim/frontend
            
            # Try port 80 first, fallback to 3000 if it fails
            if timeout 30s nohup sudo npx serve -s dist -l 80 > frontend.log 2>&1 & disown; then
              echo "‚úÖ Frontend started on port 80"
              FRONTEND_PORT=80
            else
              echo "‚ö†Ô∏è Port 80 failed, trying port 3000..."
              timeout 30s nohup npx serve -s dist -l 3000 > frontend.log 2>&1 & disown
              echo "‚úÖ Frontend started on port 3000"
              FRONTEND_PORT=3000
            fi
            sleep 3
            
            if pgrep -f "npx serve" > /dev/null; then
              echo "‚úÖ Frontend process confirmed running on port $FRONTEND_PORT"
            else
              echo "‚ùå Frontend process not found"
              echo "Frontend logs:"
              cat frontend.log || echo "No frontend logs available"
              exit 1
            fi
            
            echo "üéâ Deployment completed successfully!"
            echo "Backend: http://${{ secrets.VM_HOST }}:5000"
            echo "Frontend: http://${{ secrets.VM_HOST }}:$FRONTEND_PORT"